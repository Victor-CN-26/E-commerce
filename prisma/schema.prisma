// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --- Model-Model Utama ---

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  password      String?
  name          String?
  role          Role      @default(CUSTOMER)
  address       String?
  phone         String?
  
  orders        Order[]
  reviews       Review[]
  cartItems     CartItem[]
  posts         Post[] // Relasi: Pengguna bisa memiliki banyak postingan blog

  // Fields tambahan untuk NextAuth.js
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // @@map("user") // BARIS INI DIHAPUS
}

enum Role {
  CUSTOMER
  ADMIN
  SUPER_ADMIN
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  slug        String    @unique
  description String?
  imageUrl    String?   // <--- BARIS INI DITAMBAHKAN
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  price       Decimal  @db.Decimal(10, 2) // Menggunakan Decimal untuk harga
  stock       Int      // Stok total produk (bisa dihitung dari sizeStocks di aplikasi)
  imageUrls   String   @db.Text @default("[]") // Akan menyimpan JSON string dari array URL
  sizes       String   @db.Text @default("[]") // Akan menyimpan JSON string dari array ukuran (e.g., "S", "M", "L")
  sizeStocks  String   @db.Text @default("[]") // Akan menyimpan JSON string dari array stok per ukuran (e.g., 10, 5, 20)
  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id])
  supplierId  String?
  supplier    Supplier? @relation(fields: [supplierId], references: [id])
  
  reviews     Review[]
  orderItems  OrderItem[]
  cartItems   CartItem[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Supplier {
  id          String    @id @default(uuid())
  name        String
  contactInfo String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// prisma/schema.prisma (bagian dari model CartItem yang diperbarui)

model CartItem {
  id           String    @id @default(uuid())
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId    String
  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity     Int
  selectedSize String?   // <--- BARIS INI DITAMBAHKAN: Untuk menyimpan ukuran yang dipilih
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Kunci unik gabungan untuk memastikan satu item per produk PER UKURAN per pengguna
  @@unique([userId, productId, selectedSize]) // <--- BARIS INI DIUBAH
  @@map("cart_item")
}


model Order {
  id            String        @id @default(uuid())
  userId        String
  user          User          @relation(fields: [userId], references: [id])
  totalAmount   Decimal       @db.Decimal(10, 2)
  status        OrderStatus   @default(PENDING)
  paymentStatus PaymentStatus @default(PENDING)
  shippingAddress String
  paymentMethod String?
  orderItems    OrderItem[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
}

model Review {
  id        String   @id @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- NextAuth.js Models ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- Model untuk Postingan Blog ---
model Post {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(255)
  slug      String   @unique
  content   String   @db.Text
  imageUrl  String?
  published Boolean  @default(false)
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posts")
}

// --- Model Baru untuk Hero Slide ---
model HeroSlide {
  id          String    @id @default(uuid())
  title       String    @db.VarChar(255)
  description String?   @db.Text
  imageUrl    String
  linkUrl     String?
  order       Int       @unique @default(autoincrement())
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("hero_slides")
}
